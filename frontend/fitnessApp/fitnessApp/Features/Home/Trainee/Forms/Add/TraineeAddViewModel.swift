//
//  TraineeAddViewModel.swift
//  fitnessApp
//
//  Created by Karolína Droscová on 07.12.2024.
//

import Foundation

protocol TraineeAddViewFlowDelegate: NSObject {
    func onLoadError()
    func onBackPressed()
    func onSaveSuccess()
    func onSaveFailure(message: String)
}

protocol TraineeAddViewModeling: BaseClass, ObservableObject {
    var name: String { get set }
    var surname: String { get set }
    var email: String { get set }
    var isLoading: Bool { get set }
    func onBackPressed()
    func onSavePressed()
}

final class TraineeAddViewModel: BaseClass, TraineeAddViewModeling {
    typealias Dependencies = HasLoggerService & HasTraineeManager
    
    private let logger: LoggerServicing
    private let traineeManager: TraineeManaging
    private weak var delegate: TraineeAddViewFlowDelegate?
    
    @Published var name: String = ""
    @Published var surname: String = ""
    @Published var email: String = ""
    @Published var isLoading: Bool = false
    
    init(dependencies: Dependencies, delegate: TraineeAddViewFlowDelegate? = nil) {
        self.logger = dependencies.logger
        self.traineeManager = dependencies.traineeManager
        self.delegate = delegate
    }
    
    func onBackPressed() {
        delegate?.onBackPressed()
    }
    
    func onSavePressed() {
        Task { @MainActor [weak self] in
            guard let self = self else { return }
            self.isLoading = true
            defer { self.isLoading = false }
            
            guard !self.name.isEmpty, !self.surname.isEmpty, !self.email.isEmpty else {
                self.delegate?.onSaveFailure(message: "All fields must be filled in")
                return
            }
            
            guard self.email.isValidEmail else {
                self.delegate?.onSaveFailure(message: "Invalid email format")
                return
            }
            
            do {
                let newTrainee = Trainee(
                    traineeId: nil, // ID will be generated by the backend
                    email: self.email,
                    name: self.name,
                    surname: self.surname,
                    classes: [] // Classes are not managed here
                )
                
                try await self.traineeManager.createTrainee(newTrainee)
                self.delegate?.onSaveSuccess()
            } catch let baseError as BaseError {
                delegate?.onSaveFailure(message: baseError.message)
            } catch {
                delegate?.onSaveFailure(message: error.localizedDescription)
            }
        }
    }
}
